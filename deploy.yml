---
apiVersion: v1
kind: Service
metadata:
  name: hamster-paas-service
  namespace: hamster
spec:
  selector:
    app: hamster-paas
  type: NodePort
  ports:
    - name: hamster-paas-web
      protocol: TCP
      port: 9898
      targetPort: 9898
      nodePort: 30314
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: hamster-paas
  name: hamster-paas
  namespace: hamster
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: hamster-paas
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: hamster-paas
    spec:
      containers:
        - image: hamstershare/hamster-pass:${hamster_paas_version}
          imagePullPolicy: Always
          name: hamster-paas
          env:
            - name: PORT
              value: "9898"
            - name: MEILI_SEARCH
              value: "hamster-paas-meilisearch-service:7700"
            - name: NGINX_LOG_PATH
              value: "/var/log/nginx/access.log"
            - name: ALINE_DB_USER
              value: "root"
            - name: ALINE_DB_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: hamster-aline
                  key: db_password
            - name: ALINE_DB_HOST
              value: "mysql"
            - name: ALINE_DB_PORT
              value: "3306"
            - name: ALINE_DB_NAME
              value: "aline"
            - name: MYSQL_DATABASE
              value: "aline"
            - name: MYSQL_USER
              value: "aline"
            - name: MYSQL_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: hamster-aline
                  key: db_password
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: hamster-aline
                  key: db_password
            - name: MYSQL_HOST
              value: "mysql"
            - name: MYSQL_PORT
              value: "3306"
          resources: {}
          ports:
            - containerPort: 9898
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/log/nginx
              name: hamster-paas-nginx-log
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: hamster-paas-nginx-log
          persistentVolumeClaim:
            claimName: hamster-paas-nginx-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: hamster-paas-nginx-service
  namespace: hamster
spec:
  selector:
    app: hamster-paas-nginx
  type: NodePort
  ports:
    - name: hamster-paas-nginx
      protocol: TCP
      port: 9912
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: hamster-paas-nginx
  name: hamster-paas-nginx
  namespace: hamster
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: hamster-paas-nginx
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: hamster-paas-nginx
    spec:
      containers:
        - image: nginx
          imagePullPolicy: Always
          name: hamster-paas-nginx
          resources: {}
          ports:
            - containerPort: 80
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: configmap-hamster-paas-nginx
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - mountPath: /var/log/nginx
              name: hamster-paas-nginx-log
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: configmap-hamster-paas-nginx
          configMap:
            name: hamster-paas-nginx-config
        - name: hamster-paas-nginx-log
          persistentVolumeClaim:
            claimName: hamster-paas-nginx-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: hamster-paas-nginx-pvc
  namespace: hamster
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: longhorn
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hamster-paas-nginx-config
  namespace: hamster
data:
  nginx.conf: |-
    #user http;
    worker_processes 1;

    error_log /var/log/nginx/error.log;

    #pid        logs/nginx.pid;

    events {
      worker_connections 1024;
    }
      
    http {
      include mime.types;
      default_type application/octet-stream;
      resolver 127.0.0.11;
      
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-NginX-Proxy true;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $host;
      proxy_redirect off;
      client_max_body_size 20m;
      
      log_format main '$remote_addr - $remote_user [$time_local] "$request" '
      '$status $body_bytes_sent "$http_referer" '
      '"$http_user_agent" "$http_x_forwarded_for" '
      '"$request_body"';
      
      log_format json_analytics
          '{"msec": $msec, ' # request unixtime in seconds with a milliseconds resolution
          '"connection": "$connection", ' # connection serial number
          '"connection_requests": "$connection_requests", ' # number of requests made in connection
          '"pid": "$pid", ' # process pid
          '"request_id": "$request_id", ' # the unique request id
          '"request_length": "$request_length", ' # request length (including headers and body)
          '"remote_addr": "$remote_addr", ' # client IP
          '"remote_user": "$remote_user", ' # client HTTP username
          '"remote_port": "$remote_port", ' # client port
          '"time_local": "$time_local", '
          '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
          '"request": "$request", ' # full path no arguments if the request
          '"request_uri": "$request_uri", ' # full path and arguments if the request
          '"args": "$args", ' # args
          '"status": "$status", ' # response status code
          '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
          '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
          '"http_referer": "$http_referer", ' # HTTP referer
          '"http_user_agent": "$http_user_agent", ' # user agent
          '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
          '"http_host": "$http_host", ' # the request Host: header
          '"server_name": "$server_name", ' # the name of the vhost serving the request
          '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
          '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
          '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
          '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
          '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
          '"upstream_response_length": "$upstream_response_length", ' # upstream response length
          '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
          '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
          '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
          '"scheme": "$scheme", ' # http or https
          '"request_method": "$request_method", ' # request method
          '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
          '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
          '"gzip_ratio": "$gzip_ratio", '
          '"http_cf_ray": "$http_cf_ray"}';
      
      access_log /var/log/nginx/access.log json_analytics;
      
      sendfile on;
      #tcp_nopush     on;
      
      keepalive_timeout 65;
      
      gzip  on;
      
      map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
      }

      # Ethereum
      upstream eth_http_node {
        server 54.218.156.194:8545;
      }
      
      upstream eth_ws_node {
        server 54.218.156.194:8546;
      }

      # Ethereum Goerli
        upstream eth_http_node_goerli {
        server 52.40.104.255:8547;
      }
      
      upstream eth_ws_node_goerli {
        server 52.40.104.255:8546;
      }

      # Sui
      upstream sui_http_node {
        server 18.237.18.90:9000;
      }
      
      upstream sui_ws_node {
        server 18.237.18.90:9001;
      }

      # Avalanche
      upstream avalanche_http_node {
        server 18.246.73.187:9650;
      }

      # Optimism
      upstream optimism_http_node {
        server 34.221.140.46:9991;
      }
      
      upstream optimism_ws_node {
        server 34.221.140.46:9992;
      }

      # Near
      upstream near_http_node {
        server 52.26.103.150:3030;
      }

      # Aptos
      upstream aptos_http_node {
        server 52.26.103.150:9101;
      }

      # BSC
      upstream bsc_http_node {
        server 52.26.103.150:8545;
      }
      
      upstream bsc_ws_node {
        server 52.26.103.150:8546;
      }

      # Starknet
      upstream starknet_http_node {
        server 54.69.42.237:9545;
      }

      # Polygon
      upstream polygon_http_node {
        server 52.40.104.255:8545;
      }
      
      server {
        listen 80;
        server_name localhost;
        
        #charset koi8-r;
        
        
        location / {
          root /usr/share/nginx/html;
          index index.html index.htm;
        }
      
        #error_page  404              /404.html;
        
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
          root /usr/share/nginx/html;
        }
      
        # Ethereum
        location /ethereum {
          proxy_pass http://eth_http_node/;
        }
        
        location ^~ /ethereum/ {
          rewrite ^(.*)$ /ethereum;
        }
        
        location /ethereum-ws {
          proxy_pass http://eth_ws_node/;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection $connection_upgrade;
        }
        
        location ^~ /ethereum-ws/ {
          rewrite ^(.*)$ /ethereum-ws;
        }
      
        # Ethereum
        location /ethereum-goerli {
          proxy_pass http://eth_http_node_goerli/;
        }
        
        location ^~ /ethereum-goerli/ {
          rewrite ^(.*)$ /ethereum-goerli;
        }
        
        location /ethereum-ws-goerli {
          proxy_pass http://eth_ws_node_goerli/;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection $connection_upgrade;
        }
        
        location ^~ /ethereum-ws-goerli/ {
          rewrite ^(.*)$ /ethereum-ws-goerli;
        }
      
        # Sui
        location /sui {
          proxy_pass http://sui_http_node/;
        }
        
        location ^~ /sui/ {
          rewrite ^(.*)$ /sui;
        }
        
        location /sui-ws {
          proxy_pass http://sui_ws_node/;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection $connection_upgrade;
        }
        
        location ^~ /sui-ws/ {
          rewrite ^(.*)$ /sui-ws;
        }
      
        # Avalanche
        location /avalanche/ {
          rewrite "/([0-9a-zA-Z]{32})/(.*)$" /$2 break;
          proxy_pass http://avalanche_http_node/;
        }
      
        # Optimism
        location /optimism {
          proxy_pass http://optimism_http_node/;
        }
        
        location ^~ /optimism/ {
          rewrite ^(.*)$ /optimism;
        }
        
        location /optimism-ws {
          proxy_pass http://optimism_ws_node/;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection $connection_upgrade;
        }
        
        location ^~ /optimism-ws/ {
          rewrite ^(.*)$ /optimism-ws;
        }
      
        # Near
        location /near {
          proxy_pass http://near_http_node/;
        }
        
        location ^~ /near/ {
          rewrite ^(.*)$ /near;
        }
      
        # Aptos
        location /aptos/ {
          rewrite "/([0-9a-zA-Z]{32})/(.*)$" /$2 break;
          proxy_pass http://aptos_http_node/;
        }
      
        # BSC
        location /bsc {
          proxy_pass http://bsc_http_node/;
        }
        
        location ^~ /bsc/ {
          rewrite ^(.*)$ /bsc;
        }
        
        location /bsc-ws {
          proxy_pass http://bsc_ws_node/;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection $connection_upgrade;
        }
        
        location ^~ /bsc-ws/ {
          rewrite ^(.*)$ /bsc-ws;
        }
      
        # Starknet
        location /starknet {
          proxy_pass http://starknet_http_node/;
        }
        
        location ^~ /starknet/ {
          rewrite ^(.*)$ /starknet;
        }
      
        # Polygon
        location /polygon {
          proxy_pass http://polygon_http_node/;
        }
        
        location ^~ /polygon/ {
          rewrite ^(.*)$ /polygon;
        }
      }
    }

---
apiVersion: v1
kind: Service
metadata:
  name: hamster-paas-meilisearch-service
  namespace: hamster
spec:
  selector:
    app: hamster-paas-meilisearch
  type: NodePort
  ports:
    - name: hamster-paas-meilisearch
      protocol: TCP
      port: 7700
      targetPort: 7700
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: hamster-paas-meilisearch
  name: hamster-paas-meilisearch
  namespace: hamster
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: hamster-paas-meilisearch
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: hamster-paas-meilisearch
    spec:
      containers:
        - image: getmeili/meilisearch:v1.0
          imagePullPolicy: Always
          name: hamster-paas-meilisearch
          resources: {}
          ports:
            - containerPort: 7700
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
